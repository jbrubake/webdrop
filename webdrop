#!/bin/sh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2023 Jeremy Brubaker <јЬruЬаkе@оrіоnаrtѕ.іо>
#
# abstract: use a web server as a digital dead drop
#
# TODO: add option to randomize line length
#
# Defaults {{{1
#
ID_TAG_DFLT=?webdrop=
MSG_TAG_DFLT=?msg=
FILENAME_TAG_DFLT=?name=
DFLT_WRAP=76
DFLT_RANDOM=0
SSH_CONFIG_DFLT=
SSH_KEY_DFLT=

# Documentation {{{1
#
VERSION='1.0'
PROGNAME=$(basename $0)

print_help() {
    cat <<EOF
Usage: $PROGNAME [OPTION] [COMMAND]

Options:
 -v             display version info and exit
 -h             display this help and exit

Commands:
  load
  unload
EOF
}

print_help_load() {
    cat <<EOF
Usage: $PROGNAME load [OPTION] URL [FILE ...]

load URL with STDIN.

Options:
 -r [DELAY]     delay from 1 to DELAY seconds bbeetween sending successive
                  message chunks (Default is no delay)
 -v             display version info and exit
 -h             display this help and exit
EOF
}

print_help_unload() {
    cat <<EOF
Usage: $PROGNAME unload [OPTION] [[USER@]HOST:]LOGFILE
Unload all messages stored at [[USER@]HOST:]LOGFILE.

If HOST is empty, LOGFILE will be accessed from the local host. Otherwise,
HOST is used as the remote SSH server host (including the user if needed).

Options:
 -i [IDENTITY]  use IDENTITY as the private key to authenticate to HOST
 -F [CONFIG]    specifies an alternative SSH configuration file
 -p [PORT]      connect to HOST on PORT
 -d [DIRECTORY] save extracted files to DIRECTORY (Default = .)
 -v             display version info and exit
 -h             display this help and exit
EOF
}

print_version() {
    cat <<EOF
$PROGNAME $VERSION
Copyright (C) 2023 Orion Arts
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jeremy Brubaker.
EOF
}

# Process options {{{1
#
id_tag=$ID_TAG_DFLT
msg_tag=$MSG_TAG_DFLT
filename_tag=$FILENAME_TAG_DFLT

while getopts ':vh' opt; do
    case $opt in
        v) print_version; exit ;;
        h|?) print_help; exit ;;
    esac
done
shift $((OPTIND - 1))

# Functions {{{1
#
have() { command -v "$1" >/dev/null; }
error() { printf "%s\n" "$1" >&2; exit 1; }

set_headers() {
    id_header=$id_tag$1
    filename_header=$id_header$filename_tag
    msg_header=$id_header$msg_tag
}

rand() { awk -v max="$1" 'BEGIN {srand(); print int(max*rand()+1)}'; }

send() {
    file=$1

    if [ "$file" = "-" ]; then
        [ -r /dev/stdin ] || error "/dev/stdin is required"
        file=/dev/stdin
    fi

    id=$(rand $$)
    set_headers "$id"

    curl -s "$url$id_header" >/dev/null
    curl -s "$url$filename_header$file" >/dev/null
    for line in $(mcrypt -q <$file | base64 -w"$wrap"); do
        curl -s "$url$msg_header$line" >/dev/null
        [ "$random" -gt 0 ] && sleep $(rand "$random")
    done

    printf '%s loaded. ID = %s\n' "$file" "$id"
}

load() {
    for b in curl; do
        have "$b" || error "'$b' is required and not found"
    done

    wrap=$DFLT_WRAP
    random=$DFLT_RANDOM

    while getopts ':r:w:h' opt; do
        case $opt in
            r) random=$OPTARG ;;
            w) wrap=$OPTARG ;;
            h|?) print_help_load; exit ;;
        esac
    done
    shift $((OPTIND - 1))

    url=$1
    if [ -z "$url" ]; then
        printf '%s\n' "No url given" >&2
        print_help_load
        exit 1
    fi
    shift

    [ "$#" = 0 ] && set -- -
    for f in $@; do send "$f"; done
}

unload() {
    dir=.
    port=
    ssh_config=$SSH_CONFIG_DFLT
    ssh_key=$SSH_KEY_DFLT

    while getopts ':F:i:p:d:h' opt; do
        case $opt in
            F) ssh_config=$OPTARG ;;
            i) ssh_key=$OPTARG ;;
            p) port=$OPTARG ;;
            d) dir=$OPTARG ;;
            h|?) print_help_unload; exit ;;
        esac
    done
    shift $((OPTIND - 1))

    ! [ -d "$dir" ] && mkdir -p "$dir"

    log=$1
    if [ -z "$log" ]; then
        printf '%s\n' "No logfile given" >&2
        print_help_unload
        exit 1
    fi
    shift

    # If $log contains a colon, then it is a remote logfile
    if [ "${log#*:}" != "$log" ]; then
        for b in mktemp scp ssh; do
            have "$b" || error "'$b' is required and not found"
        done

        remote=yes
        host=${log%%:*}
        remote_log=${log#*:}

        log=$(mktemp --tmpdir webdrop.XXXXXXXX)
        trap 'rm -f "$log"; trap - EXIT; exit' EXIT INT HUP TERM

        scp -q \
            ${port:+-P "$port"} \
            ${ssh_config:+-F "$ssh_config"} \
            ${ssh_key:+-i "$ssh_key"} \
            "$host:$remote_log" "$log"

    # otherwise it's local
    else
        remote=no
    fi

    # Find all message ids
    set_headers ""

    for id in $(grep "GET /$id_header[[:digit:]][[:digit:]]* " "$log" |
                    cut -d' ' -f7 |
                    sed "s/.*$id_header//"); do
        set_headers "$id"

        # Get filename
        file=$(grep "$filename_header" "$log" |
                   cut -d' ' -f7 |
                   sed "s/.*$filename_header//")

        # Print filename and id
        printf '%s (id = %s)\n' "$file" "$id"
        # Get a usable filename
        if [ "$file" = '/dev/stdin' ]; then
            file=stdin
        else
            file=$(basename "$file")
        fi
        # Get and save file contents
        grep "GET /$msg_header" "$log" |
            cut -d' ' -f7 |
            sed "s/.*$msg_header//" |
            base64 -d |
            mcrypt -qd > "$dir/$file"

    done

    # Clean up
    case $remote in
        yes) ssh ${port:+-p "$port"} \
                 ${ssh_config:+-F "$ssh_config"} \
                 ${ssh_key:+-i "$ssh_key"} \
                 "$host" "> $remote_log" ;;
        no)  > "$log" ;;
    esac
}

# Main {{{1
#
for b in base64 mcrypt; do
    have "$b" || error "'$b' is required and not found"
done

case $1 in
    load) shift; load "$@" ;;
    unload) shift; unload "$@" ;;
    *) printf 'Unknown command: %s\n' "$1" >&2; print_help; exit 1 ;;
esac

