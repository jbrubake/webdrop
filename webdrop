#!/bin/sh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2023 Jeremy Brubaker <јЬruЬаkе@оrіоnаrtѕ.іо>
#
# abstract: use a web server as a digital dead drop
#
# TODO: use the -w option to base64 to limit line length *or*
# TODO: make a giant string that you can randomly chop up
#
# TODO: send the data out over time, randomly
#
# Defaults {{{1
#
ID_TAG_DFLT=?webdrop=
HASH_TAG_DFLT=?hash=
MSG_TAG_DFLT=?msg=

# Documentation {{{1
#
VERSION='1.0'
PROGNAME=$(basename $0)

print_help() {
    cat <<EOF
Usage: $PROGNAME [OPTION] load URL
   or: $PROGNAME [OPTION] unload LOGFILE
In the 1st form, load URL with STDIN.
In the 2nd form, unload all messages stored in LOGFILE.

Options: 
 -v            display version info and exit
 -h            display this help and exit
EOF
}

print_version() {
    cat <<EOF
$PROGNAME $VERSION
Copyright (C) 2022 Orion Arts
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jeremy Brubaker.
EOF
}

# Process options {{{1
#
id_tag=$ID_TAG_DFLT
hash_tag=$HASH_TAG_DFLT
msg_tag=$MSG_TAG_DFLT

while getopts ':vh' opt; do
    case $opt in
        v) print_version; exit ;;
        h|?) print_help; exit ;;
    esac
done
shift $((OPTIND - 1))

# Functions {{{1
#
function set_headers() {
    id_header=$id_tag$1
    hash_header=$id_header$hash_tag
    msg_header=$id_header$msg_tag
}

function load() {
    url=$1
    if [ -z "$url" ]; then
        printf '%s\n' "No url given" >&2
        print_help
        exit 1
    fi
    shift

    # Use $$ as the message id
    id=$$
    set_headers "$id"

    fifo=$$.fifo
    mkfifo -m 600 "$fifo"

    curl -s "$url$id_header" >/dev/null
    curl -s "$url$hash_header$(<&0 tee "$fifo" | md5sum | cut -d' ' -f1)" >/dev/null &
    for line in $(base64 "$fifo"); do
        curl -s "$url$msg_header$line" >/dev/null
    done

    printf 'Message loaded. ID = %s\n' "$id"

    rm "$fifo"
}

function unload() {
    log=$1
    if [ -z "$log" ]; then
        printf '%s\n' "No logfile given" >&2
        print_help
        exit 1
    fi
    shift

    # Find all message ids
    set_headers ""

    for id in $(grep "GET /$id_header[[:digit:]][[:digit:]]* " "$log" | cut -d' ' -f7 | sed "s/.*$id_header//"); do
        set_headers "$id"

        # Print message id, hash and contents
        printf 'id = %s, hash = %s\n' "$id" "$(grep "$hash_header" "$log" | cut -d' ' -f7 | sed "s/.*$hash_header//")"
        grep "GET /$msg_header" "$log" | cut -d' ' -f7 | sed "s/.*$msg_header//" | base64 -d > "$id.msg"

        # Delete message from log
        # FIXME: This prevents further writes to the log. Probably a file handling changing problem
        #sed -i "/GET \/$id_header/d" "$log"
    done
}

# Main {{{1
#
case $1 in
    load) shift; load "$@" ;;
    unload) shift; unload "$@" ;;
    *) printf 'Unknown command: %s\n' "$1" >&2; print_help; exit 1 ;;
esac

